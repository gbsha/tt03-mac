--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - tt03_mac.v
  top_module:  "gbsha_tt03_mac_top"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Georg"
  title:        "ttMAC: Multiply-Accumulate Accelerator"
  language:     "Verilog"
  description:  "ttMAC calculates the multiply-accumulate (MAC) operation (aka inner product) of two vectors, an input vector and a weight vector, each of length 4."

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
    ttMAC applies the multiply-accumulate (MAC) operation to an input vector and a weight vector, each of length 4. The vector entries are in 6bit 2's complement format. Three variations
    are supported: (1) load weights, load inputs, calculate output. Then repeat for new weights and new inputs. (2) load weights once, then calculate outputs for a sequence of inputs, 
    (3) load weights once and then convolve it with a sequence of inputs. In this case, ttMAC acts as a finite impulse response (FIR) filter. The output value is 13 bit, of which the 8 MSBs are output.
    Optionally, the 5 LSBs are also output in an extra clock cycle. 

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      - test inputs and expected outputs are defined in the [cocotb testbench](https://github.com/gbsha/tt03-mac/blob/main/src/test.py).
      - more details will be provided [here](https://github.com/gbsha/tt03-mac/blob/main/README.md).

# A description of what the inputs do
  inputs:               
    - clock
    - reset
    - bit0 LSB of weight/input.
    - bit1
    - bit2
    - bit3
    - bit4
    - bit5 MSB.
# A description of what the outputs do
  outputs:
    - bit0 MSB5|LSB0
    - bit1
    - bit2
    - bit3
    - bit4 MSB9|LSB4
    - bit5
    - bit6
    - bit7 MSB12

# The following fields are optional
  tag:          "digital, multiply-accumulate, FIR, filter, DSP" # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, mi/croprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  "FPGA/microcontroller for providing and reading input signal and output signal, respectively"      # Describe any external hardware needed
  discord:      "georg#9602"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     "./README.md"      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     maximum available    # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
